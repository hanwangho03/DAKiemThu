@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer Localizer
@model WebDoDienTu.ViewModels.PostDetailsViewModel

@{
    ViewData["Title"] = Model.Post.Title;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: center;
    }

    th {
        background-color: #f2f2f2;
        font-weight: bold;
    }

    .icon-like.active {
        fill: #34D399;
    }

    .icon-dislike.active {
        fill: #EF4444;
    }
</style>

<div class="container mt-5">
    <!-- Post Details -->
    <div class="row">
        <div class="col-md-12">
            <h2>@Model.Post.Title</h2>
            <div>
                @Html.Raw(Model.PostContentAsHtml)
            </div>
            <p><small><strong>@Localizer["PostDetails"]:</strong> @Model.Post.CreatedAt.ToString("dd/MM/yyyy")</small></p>
        </div>
    </div>

    <hr />

    <!-- Like and Dislike Section -->
    <div class="like-dislike mt-4 flex items-center space-x-4">
        <span class="flex items-center cursor-pointer" id="like-action">
            <svg class="icon-like @(Model.UserLiked ? "active" : "")" xmlns="http://www.w3.org/2000/svg" width="2em" height="2em" viewBox="0 0 24 24" fill="currentColor">
                <path d="M20.975 12.185l-.739-.128zm-.705 4.08l-.74-.128zM6.938 20.477l-.747.065zm-.812-9.393l.747-.064zm7.869-5.863l.74.122zm-.663 4.045l.74.121zm-6.634.411l-.49-.568zm1.439-1.24l.49.569zm2.381-3.653l-.726-.189zm.476-1.834l.726.188zm1.674-.886l-.23.714zm.145.047l.229-.714zM9.862 6.463l.662.353zm4.043-3.215l-.726.188zm-2.23-1.116l-.326-.675zM3.971 21.471l-.748.064zM3 10.234l.747-.064a.75.75 0 0 0-1.497.064zm17.236 1.823l-.705 4.08l1.478.256l.705-4.08zm-6.991 9.193H8.596v1.5h4.649zm-5.56-.837l-.812-9.393l-1.495.129l.813 9.393zm11.846-4.276c-.507 2.93-3.15 5.113-6.286 5.113v1.5c3.826 0 7.126-2.669 7.764-6.357zM13.255 5.1l-.663 4.045l1.48.242l.663-4.044zm-6.067 5.146l1.438-1.24l-.979-1.136L6.21 9.11zm4.056-5.274l.476-1.834l-1.452-.376l-.476 1.833zm1.194-2.194l.145.047l.459-1.428l-.145-.047zm-1.915 4.038a8.4 8.4 0 0 0 .721-1.844l-1.452-.377A7 7 0 0 1 9.2 6.11zm2.06-3.991a.89.89 0 0 1 .596.61l1.452-.376a2.38 2.38 0 0 0-1.589-1.662zm-.863.313a.52.52 0 0 1 .28-.33l-.651-1.351c-.532.256-.932.73-1.081 1.305zm.28-.33a.6.6 0 0 1 .438-.03l.459-1.428a2.1 2.1 0 0 0-1.548.107zm2.154 8.176h5.18v-1.5h-5.18zM4.719 21.406L3.747 10.17l-1.494.129l.971 11.236zm-.969.107V10.234h-1.5v11.279zm-.526.022a.263.263 0 0 1 .263-.285v1.5c.726 0 1.294-.622 1.232-1.344zM14.735 5.343a5.5 5.5 0 0 0-.104-2.284l-1.452.377a4 4 0 0 1 .076 1.664zM8.596 21.25a.916.916 0 0 1-.911-.837l-1.494.129a2.416 2.416 0 0 0 2.405 2.208zm.03-12.244c.68-.586 1.413-1.283 1.898-2.19L9.2 6.109c-.346.649-.897 1.196-1.553 1.76zm13.088 3.307a2.416 2.416 0 0 0-2.38-2.829v1.5c.567 0 1 .512.902 1.073zM3.487 21.25c.146 0 .263.118.263.263h-1.5c0 .682.553 1.237 1.237 1.237zm9.105-12.105a1.583 1.583 0 0 0 1.562 1.84v-1.5a.083.083 0 0 1-.082-.098zm-5.72 1.875a.92.92 0 0 1 .316-.774l-.98-1.137a2.42 2.42 0 0 0-.83 2.04z" />
            </svg>
            (@Localizer["LikeCount"] <span id="like-count">@Model.Post.ActionPosts.Count(ap => ap.Like)</span>)
        </span>

        <span class="flex items-center cursor-pointer" id="dislike-action">
            <svg class="icon-dislike @(Model.UserDisliked ? "active" : "")" xmlns="http://www.w3.org/2000/svg" width="2em" height="2em" viewBox="0 0 24 24" fill="currentColor">
                <path d="M20.975 11.815l-.739.128zm-.705-4.08l-.74.128zM6.938 3.523l-.747-.065zm-.812 9.393l.747.064zm7.869 5.863l.74-.122zm-.663-4.045l.74-.121zm-6.634-.412l-.49.569zm1.439 1.24l.49-.568zm2.381 3.654l-.726.189zm.476 1.834l.726-.188zm1.674.886l-.23-.714zm.145-.047l.229.714zm-2.951-4.352l.662-.353zm4.043 3.216l-.726-.189zm-2.23 1.115l-.326.675zM3.971 2.529l-.748-.064zM3 13.766l.747.064a.75.75 0 0 1-1.497-.064zm17.236-1.823l-.705-4.08l1.478-.256l.705 4.08zM13.245 2.75H8.596v-1.5h4.649zm-5.56.838l-.812 9.392l-1.495-.129l.813-9.393zm11.846 4.275c-.507-2.93-3.15-5.113-6.286-5.113v-1.5c3.826 0 7.126 2.669 7.764 6.357zM13.255 18.9l-.663-4.045l1.48-.242l.663 4.044zm-6.067-5.146l1.438 1.24l-.979 1.137l-1.438-1.24zm4.056 5.274l.476 1.834l-1.452.376l-.476-1.833zm1.194 2.194l.145-.047l.459 1.428l-.145.047zm-1.915-4.038c.312.584.555 1.203.721 1.844l-1.452.377A7 7 0 0 0 9.2 17.89zm2.06 3.991a.89.89 0 0 0 .596-.61l1.452.376a2.38 2.38 0 0 1-1.589 1.662zm-.863-.313a.51.51 0 0 0 .28.33l-.651 1.351a2.01 2.01 0 0 1-1.081-1.305zm.28.33a.6.6 0 0 0 .438.03l.459 1.428a2.1 2.1 0 0 1-1.548-.107zm2.154-8.176h5.18v1.5h-5.18zM4.719 2.594L3.747 13.83l-1.494-.129l.971-11.236zm-.969-.107v11.279h-1.5V2.487zm-.526-.022a.263.263 0 0 0 .263.285v-1.5c.726 0 1.294.622 1.232 1.344zm11.511 16.192c.125.76.09 1.538-.104 2.284l-1.452-.377c.14-.543.167-1.11.076-1.664zM8.596 2.75a.916.916 0 0 0-.911.838l-1.494-.13A2.416 2.416 0 0 1 8.596 1.25zm.03 12.244c.68.586 1.413 1.283 1.898 2.19l-1.324.707c-.346-.649-.897-1.196-1.553-1.76zm13.088-3.307a2.416 2.416 0 0 1-2.38 2.829v-1.5a.916.916 0 0 0 .902-1.073zM3.487 2.75a.263.263 0 0 0 .263-.263h-1.5c0-.682.553-1.237 1.237-1.237zm9.105 12.105a1.583 1.583 0 0 1 1.562-1.84v1.5c-.05 0-.09.046-.082.098zm-5.72-1.875a.92.92 0 0 0 .316.774l-.98 1.137a2.42 2.42 0 0 1-.83-2.04z" />
            </svg>
            (@Localizer["DislikeCount"] <span id="dislike-count">@Model.Post.ActionPosts.Count(ap => ap.Dislike)</span>)
        </span>
    </div>

    <hr />

    <!-- Comments Section -->
    <div class="row mt-4">
        <div class="col-md-8">
            <h3>@Localizer["CommentSection"]</h3>
            <!-- Display Comments -->
            <div id="comments-container">
                @if (Model.Comments.Any())
                {
                    var initialComments = Model.Comments.Take(5);
                    foreach (var comment in initialComments)
                    {
                        <div class="mb-3 p-3 border rounded">
                            <p><strong>@comment.Author.LastName</strong> <small>@comment.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small></p>
                            <p>@comment.Content</p>
                        </div>
                    }
                }
                else
                {
                    <p>@Localizer["NoCommentsYet"]</p>
                }
            </div>
            <!-- Load More Button -->
            <button style="display: none" id="load-more" class="btn btn-secondary mt-3">@Localizer["LoadMoreComments"]</button>
        </div>
    </div>

    <!-- Add Comment Form -->
    <div class="row mt-4">
        <div class="col-md-8">
            <h4>@Localizer["AddNewComment"]</h4>
            <form asp-action="Comment" asp-controller="Comments" method="post">
                <input type="hidden" name="PostId" value="@Model.Post.PostId" />

                <div class="form-group">
                    <label for="Content">@Localizer["CommentContent"]</label>
                    <textarea id="Content" name="Content" class="form-control" required></textarea>
                </div>
                <button type="submit" class="btn btn-primary mt-2">@Localizer["SubmitComment"]</button>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentCommentCount = 5;
        const loadMoreButtonElement = document.getElementById("load-more");
        const totalComments = @Model.Comments.Count();

        // Tìm các phần tử like và dislike
        const likeButton = document.getElementById("like-action");
        const dislikeButton = document.getElementById("dislike-action");
        const likeIcon = document.querySelector(".icon-like");
        const dislikeIcon = document.querySelector(".icon-dislike");
        const postId = @Model.Post.PostId;

        // Gửi yêu cầu like
        likeButton.addEventListener("click", async () => {
            try {
                const isActive = likeIcon.classList.contains("active");

                if (!isActive) {
                    // Gửi yêu cầu Like
                    const response = await fetch('/Posts/LikePost', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(@Model.Post.PostId)
                    });
                    const result = await response.json();

                    // Cập nhật giao diện
                    likeIcon.classList.add("active");
                    dislikeIcon.classList.remove("active");
                } else {
                    // Hủy Like
                    const response = await fetch(`/Posts/RemoveLike`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(@Model.Post.PostId)
                    });
                    if (!response.ok) throw new Error("Remove Like failed");

                    // Hủy giao diện Like
                    likeIcon.classList.remove("active");
                }
            } catch (error) {
                console.error("Error:", error);
                alert("Có lỗi xảy ra khi thực hiện hành động Like.");
            }
        });

        // Gửi yêu cầu dislike
        dislikeButton.addEventListener("click", async () => {
            try {
                const isActive = dislikeIcon.classList.contains("active");

                if (!isActive) {
                    // Gửi yêu cầu Dislike
                    const response = await fetch('/Posts/DislikePost', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(@Model.Post.PostId)
                    });
                    const result = await response.json();

                    // Cập nhật giao diện
                    dislikeIcon.classList.add("active");
                    likeIcon.classList.remove("active");
                } else {
                    // Hủy Dislike
                    const response = await fetch(`/Posts/RemoveDislike`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(@Model.Post.PostId)
                    });
                    if (!response.ok) throw new Error("Remove Dislike failed");

                    // Hủy giao diện Dislike
                    dislikeIcon.classList.remove("active");
                }
            } catch (error) {
                console.error("Error:", error);
                alert("Có lỗi xảy ra khi thực hiện hành động Dislike.");
            }
        });

        // Khởi tạo kết nối SignalR
        const connection1 = new signalR.HubConnectionBuilder()
            .withUrl("/posthub")
            .build();

        // Bắt đầu kết nối
        connection1.start().catch(err => console.error(err));

        // Lắng nghe sự kiện cập nhật Like/Dislike
        connection1.on("UpdateLikes", (postId, likes, dislikes) => {
            console.log(postId)
            if (postId === @Model.Post.PostId) {
                document.getElementById("like-count").innerText = likes;
                document.getElementById("dislike-count").innerText = dislikes;
            }
        });

        if(totalComments > 5){
            loadMoreButtonElement.style.display = 'block'
        }

        document.getElementById("load-more").addEventListener("click", function () {
            fetch(`/Comments/LoadMoreComments?postId=@Model.Post.PostId&offset=${currentCommentCount}&count=5`)
                .then(response => response.json())
                .then(data => {
                    if (data.$values && Array.isArray(data.$values)) {
                        data.$values.forEach(comment => {
                            const commentDiv = document.createElement("div");
                            commentDiv.className = "mb-3 p-3 border rounded";
                            commentDiv.innerHTML = `<p><strong>${comment.authorName}</strong> <small>${comment.createdAt}</small></p><p>${comment.content}</p>`;
                            document.getElementById("comments-container").appendChild(commentDiv);
                        });

                        currentCommentCount += data.$values.length;

                        if (currentCommentCount >= totalComments) {
                            document.getElementById("load-more").style.display = 'none';
                        }
                    } else {
                        document.getElementById("load-more").style.display = 'none';
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert("Đã xảy ra lỗi khi tải thêm bình luận. Vui lòng thử lại.");
                });
        });
    </script>
}
